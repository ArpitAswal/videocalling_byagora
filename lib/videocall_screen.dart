import 'dart:io';

import 'package:VideoCaller/main.dart';
import 'package:VideoCaller/utils.dart';
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:agora_rtc_engine/agora_rtc_engine.dart';
import 'package:flutter/services.dart';
import 'package:permission_handler/permission_handler.dart';

int uid = 0; // uid of the local user Indicates if the local user has joined the channel
List remoteIds = []; // uid of the remote user
bool _isJoined = false; // Indicates if the local user has joined the channel
late RtcEngine agoraEngine; // Agora engine instance

bool microphone = false;
bool options = false;
bool camera = false;

class VideoCallScreen extends StatefulWidget {
  const VideoCallScreen({Key? key, required this.channelName})
      : super(key: key);
  final String channelName;

  @override
  State<VideoCallScreen> createState() => _VideoCallScreenState();
}

class _VideoCallScreenState extends State<VideoCallScreen> {
  @override
  void initState() {
    super.initState();
    getPermissions();
  }

  @override
  void dispose() async {
    super.dispose();
    await agoraEngine.leaveChannel();
    await agoraEngine.release();
  }

  snackBar(String message) {
    var snackBar = SnackBar(
      content: Text(message),
    );
    return snackBar;
  }

  void _onToggleMute() {
    setState(() {
      microphone = !microphone;
    });
    agoraEngine.muteLocalAudioStream(!microphone);
  }

  void _onCallEnd(BuildContext context) {
    setState(() {
      _isJoined = false;
      remoteIds.clear();
    });
    agoraEngine.leaveChannel();
    Navigator.pushReplacement(
        context,
        MaterialPageRoute(
            builder: (BuildContext context) => const MyHomePage()));
  }

  void _onSwitchCamera() {
    agoraEngine.switchCamera();
  }

  void _offCamera() {
    setState(() {
      camera = !camera;
      _isJoined = !_isJoined;
    });
  }

  Future<void> initializeAgora(bool value) async {
    //create an instance of the Agora engine
    agoraEngine = createAgoraRtcEngine();

    await agoraEngine.initialize(const RtcEngineContext(
      appId: Utils.appID,
    ));

    // Enable the video module
    await agoraEngine.enableVideo();
    await agoraEngine
        .setChannelProfile(ChannelProfileType.channelProfileCommunication);

    // Enable local video preview
    await agoraEngine.startPreview();

    await agoraEngine.joinChannel(
      // Join a channel using a temporary token and channel name
      token: Utils.token,
      channelId: Utils.channelName,
      options: const ChannelMediaOptions(
          // Automatically subscribe to all video streams
          autoSubscribeVideo: true,
          // Automatically subscribe to all audio streams
          autoSubscribeAudio: true,
          // Publish camera video
          publishCameraTrack: true,
          // Publish microphone audio
          publishMicrophoneTrack: true,
          // Set user role to clientRoleBroadcaster (broadcaster) or clientRoleAudience (audience)
          clientRoleType: ClientRoleType.clientRoleBroadcaster),
      uid: 0, // When you set uid to 0, a user name is randomly generated by the engine
    );

    // Register the event handler
    agoraEngine.registerEventHandler(
      RtcEngineEventHandler(
        onJoinChannelSuccess: (RtcConnection connection, int elapsed) {
          ScaffoldMessenger.of(context)
              .showSnackBar(snackBar("you have joined the channel"));
          setState(() {
            _isJoined = true;
          });
        },
        onUserJoined: (RtcConnection connection, int remoteUid, int elapsed) {
          ScaffoldMessenger.of(context).showSnackBar(
              snackBar("Remote user uid:$remoteUid joined the channel"));
          setState(() {
            remoteIds.add(remoteUid);
          });
        },
        onUserOffline: (RtcConnection connection, int remoteUid,
            UserOfflineReasonType reason) {
          ScaffoldMessenger.of(context).showSnackBar(
              snackBar("Remote user uid:$remoteUid left the channel"));
          setState(() {
            remoteIds.remove(remoteUid);
          });
        },
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final width = MediaQuery.of(context).size.width;
    final height = MediaQuery.of(context).size.height;

    return WillPopScope(
      onWillPop: (() async {
        return await leaveDialog(context);
      }),
      child: Scaffold(
          body: SafeArea(
            child: Column(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
            (remoteIds.isEmpty)
                ? cardWidget()
                : Container(
                    width: width,
                    height: height * .15,
                    decoration: const BoxDecoration(
                        shape: BoxShape.rectangle,
                        borderRadius: BorderRadius.vertical(
                            top: Radius.circular(18.0),
                            bottom: Radius.circular(18.0))),
                    child: _remoteVideo(),
                  ),
            Container(
              height: MediaQuery.of(context).size.height * .6,
              width: MediaQuery.of(context).size.width,
              decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(56.0),
                  color: Colors.lightBlue),
              margin:
                  const EdgeInsets.fromLTRB(16.0, 32.0, 16.0, 20.0),
              child: _localPreview(),
            ),
            _toolbar()
                    ],
                  ),
          )),
    );
  }

  Widget _toolbar() {
    return Container(
      alignment: Alignment.bottomCenter,
      child: Row(
        mainAxisAlignment: MainAxisAlignment.center,
        children: <Widget>[
          RawMaterialButton(
            onPressed: _offCamera,
            shape: const CircleBorder(),
            elevation: 5.0,
            fillColor: camera ? Colors.blueAccent : Colors.white,
            padding: const EdgeInsets.all(12.0),
            child: Icon(
              Icons.camera_alt,
              color: camera ? Colors.white : Colors.blueAccent,
              size: 20.0,
            ),
          ),
          RawMaterialButton(
            onPressed: () => _onCallEnd(context),
            shape: const CircleBorder(),
            elevation: 5.0,
            fillColor: Colors.redAccent,
            padding: const EdgeInsets.all(15.0),
            child: const Icon(
              Icons.call_end,
              color: Colors.white,
              size: 35.0,
            ),
          ),
          RawMaterialButton(
            onPressed: _onSwitchCamera,
            shape: const CircleBorder(),
            elevation: 5.0,
            fillColor: Colors.white,
            padding: const EdgeInsets.all(12.0),
            child: const Icon(
              Icons.switch_camera,
              color: Colors.blueAccent,
              size: 20.0,
            ),
          ),
          RawMaterialButton(
            onPressed: _onToggleMute,
            shape: const CircleBorder(),
            elevation: 5.0,
            fillColor: microphone ? Colors.blueAccent : Colors.white,
            padding: const EdgeInsets.all(12.0),
            child: Icon(
              microphone ? Icons.mic : Icons.mic_off,
              color: microphone ? Colors.white : Colors.blueAccent,
              size: 20.0,
            ),
          ),
        ],
      ),
    );
  }

  Widget _localPreview() {
    if (_isJoined) {
      return AgoraVideoView(
        controller: VideoViewController(
          rtcEngine: agoraEngine,
          canvas: const VideoCanvas(uid: 0),
        ),
      );
    } else {
      return Center(
        child: Icon(
          Icons.person,
          color: Colors.white,
          size: MediaQuery.of(context).size.height * .45,
        ),
      );
    }
  }

  Widget _remoteVideo() {
    return ListView.builder(
        scrollDirection: Axis.horizontal,
        itemCount: remoteIds.length,
        itemBuilder: (BuildContext context, index) {
          return Padding(
            padding: const EdgeInsets.symmetric(horizontal: 8.0),
            child: Container(
              height: 100,
              width: 100,
              decoration: BoxDecoration(
                border: Border.all(color: Colors.blue, width: 2),
              ),
              child: AgoraVideoView(
                controller: VideoViewController.remote(
                  rtcEngine: agoraEngine,
                  canvas: VideoCanvas(uid: remoteIds[index]),
                  connection: const RtcConnection(channelId: Utils.channelName),
                ),
              ),
            ),
          );
        });
  }

  Future<void> getPermissions() async {
    bool value = await getMicPermissions();
    await getCameraPermissions();
    initializeAgora(value);
  }

  Future<bool> getMicPermissions() async {
    if (Platform.isAndroid || Platform.isIOS) {
      final micPermission = await Permission.microphone.request();
      if (micPermission == PermissionStatus.granted) {
        setState(() => microphone = true);
      }
    } else {
      setState(() => microphone = !microphone);
    }
    return microphone;
  }

  Future<void> getCameraPermissions() async {
    if (Platform.isAndroid || Platform.isIOS) {
      final cameraPermission = await Permission.camera.request();
      if (cameraPermission == PermissionStatus.granted) {
        setState(() => camera = true);
      }
    } else {
      setState(() => camera = !camera);
    }
  }

  leaveDialog(BuildContext context) {
    showDialog(
        context: context,
        builder: (BuildContext context) {
          return AlertDialog(
            title: const Text("Exit"),
            content: const Text(
                "What would you want to do, exit the App or Meeting"),
            shape: const RoundedRectangleBorder(
              borderRadius: BorderRadius.all(Radius.circular(18.0)),
            ),
            actions: [
              TextButton(
                onPressed: () {
                  Navigator.pop(context);
                },
                child: const Text("Cancel"),
              ),
              TextButton(
                onPressed: () {
                  setState(() {
                    _isJoined = false;
                    remoteIds.clear();
                  });
                  agoraEngine.leaveChannel();
                  SystemNavigator.pop();
                },
                child: const Text("App"),
              ),
              TextButton(
                onPressed: () {
                  Navigator.pushReplacement(
                      context,
                      MaterialPageRoute(
                          builder: (BuildContext context) =>
                              const MyHomePage()));
                },
                child: const Text("Meeting"),
              )
            ],
          );
        });
  }

  Widget cardWidget() {
    return Card(
      color: Colors.white,
      elevation: 7,
      shadowColor: Colors.grey[400],
      clipBehavior: Clip.antiAlias,
      margin: const EdgeInsets.symmetric(vertical: 8.0, horizontal: 8.0),
      child: SizedBox(
        height: MediaQuery.of(context).size.height * .15,
        width: MediaQuery.of(context).size.width * .26,
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            Image.asset(
              "assets/avatar.png",
              fit: BoxFit.contain,
              filterQuality: FilterQuality.high,
              height: MediaQuery.of(context).size.height * .1,
              width: MediaQuery.of(context).size.width * .3,
            ),
            const Padding(
              padding: EdgeInsets.symmetric(vertical: 2.0),
              child: Text(
                "Not Joined",
                softWrap: true,
              ),
            )
          ],
        ),
      ),
    );
  }
}
